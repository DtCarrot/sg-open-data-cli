"main";let program;_bd3‍.w("commander",[["default",["program"],function(v){program=v}]]);let fs;_bd3‍.w("fs",[["default",["fs"],function(v){fs=v}]]);let prompts;_bd3‍.w("prompts",[["default",["prompts"],function(v){prompts=v}]]);let download;_bd3‍.w("download",[["default",["download"],function(v){download=v}]]);let sprintf;_bd3‍.w("sprintf-js",[["sprintf",["sprintf"],function(v){sprintf=v}]]);let fetch;_bd3‍.w("node-fetch",[["default",["fetch"],function(v){fetch=v}]]);






_bd3‍.g.console.log('Running')
program.version('0.0.1').description('Contact management system')

program
  .command('list')
  .alias('a')
  .description('Add a contact')
  .action(async () => {
    const list = await fetch('https://data.gov.sg/api/action/package_list')
    const listJSON = await list.json()
    listJSON.result.map((obj, idx) => {
      _bd3‍.g.console.log(sprintf('ID: %2.2d Name: %s', idx, obj))
    })
  })

program
  .command('download <package> <dest>')
  .alias('a')
  .description('download')
  .action(async (pkg, dest) => {
    const packageUrl = `https://data.gov.sg/api/action/package_show?id=${pkg}`
    const packageResult = await fetch(packageUrl)
    _bd3‍.g.console.log('Result: ', packageResult)
    const packageJSON = await packageResult.json()
    const {
      result: { resources },
    } = packageJSON
    _bd3‍.g.console.log(`There are ${resources.length} resources`)
    resources.map((obj, idx) => {
      _bd3‍.g.console.log(`${idx} - ${obj.name}`)
    })
    const userResponse = await prompts({
      type: 'number',
      name: 'value',
      message: 'Which file you want to download?',
      validate: value => (value > resources.length ? 'Out of range' : true),
    })
    _bd3‍.g.console.log('Response: ', userResponse)
    let { value } = userResponse
    let { url } = resources[value]
    _bd3‍.g.console.log('Url: ', url)
    const urlSplit = url.split('.')
    const ext = urlSplit[urlSplit.length - 1]
    _bd3‍.g.console.log('Ext: ', ext)
    // const downloadData = await fetch(url)
    // downloadData.pipe(fs.createWriteStream(`./test.${ext}`))
    download(url).pipe(
      fs.createWriteStream(`${dest}/${resources[value].name}.${ext}`),
    )
  })

program.parse(process.argv)
